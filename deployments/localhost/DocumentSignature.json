{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userIdentityNFT",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signingDomain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signatureVersion",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "DocumentSignature__CreatorIdentityNotExit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokeId",
          "type": "uint256"
        }
      ],
      "name": "DocumentSignature__InValidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentSignature__OnlyOwnerCanCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "start",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "end",
          "type": "uint64"
        }
      ],
      "name": "DocumentSignature__StartingAndEndingValuesNotSome",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentSignature__UserNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isValidation",
          "type": "bool"
        }
      ],
      "name": "DocumentProcess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "DocumentedCrearted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAST_VOTE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "checkMyCastedVote",
      "outputs": [
        {
          "internalType": "enum IDocumentSignature.SignatureStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "description",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "signatureStartingPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "signatureEndingingPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "partiesTokenId",
          "type": "uint256[]"
        }
      ],
      "name": "createDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getDocumentDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "description",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum IDocumentSignature.SignatureStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDocumentSignature.Party[]",
              "name": "parties",
              "type": "tuple[]"
            },
            {
              "internalType": "enum IDocumentSignature.DocumentState",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "signatureStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "signatureEnd",
              "type": "uint64"
            }
          ],
          "internalType": "struct IDocumentSignature.DocumentDetials",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getDocumentEndingingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getDocumentStartingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum IDocumentSignature.DocumentState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "isValidation",
          "type": "bool"
        }
      ],
      "name": "processDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ed6c40d3dc96a8658541fa5c36fb0d35a0b8b8d9de06ba348482cb7f080c01b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "4927040",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000240000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000001000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9177763e27f3b04545a5380184e9a91b663198b2b5834101e00f0c29c02ef58a",
    "transactionHash": "0x1ed6c40d3dc96a8658541fa5c36fb0d35a0b8b8d9de06ba348482cb7f080c01b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0x1ed6c40d3dc96a8658541fa5c36fb0d35a0b8b8d9de06ba348482cb7f080c01b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9177763e27f3b04545a5380184e9a91b663198b2b5834101e00f0c29c02ef58a"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "4927040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "Doc-Sign",
    "DS_786",
    "Doc-Sign",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "5c707cec2a886f1d91835754be9ed0f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userIdentityNFT\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signingDomain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signatureVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"DocumentSignature__CreatorIdentityNotExit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokeId\",\"type\":\"uint256\"}],\"name\":\"DocumentSignature__InValidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentSignature__OnlyOwnerCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"DocumentSignature__StartingAndEndingValuesNotSome\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentSignature__UserNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isValidation\",\"type\":\"bool\"}],\"name\":\"DocumentProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"DocumentedCrearted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAST_VOTE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"checkMyCastedVote\",\"outputs\":[{\"internalType\":\"enum IDocumentSignature.SignatureStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"signatureStartingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"signatureEndingingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"partiesTokenId\",\"type\":\"uint256[]\"}],\"name\":\"createDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getDocumentDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IDocumentSignature.SignatureStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IDocumentSignature.Party[]\",\"name\":\"parties\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IDocumentSignature.DocumentState\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"signatureStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"signatureEnd\",\"type\":\"uint64\"}],\"internalType\":\"struct IDocumentSignature.DocumentDetials\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getDocumentEndingingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getDocumentStartingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum IDocumentSignature.DocumentState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isValidation\",\"type\":\"bool\"}],\"name\":\"processDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DocumentSignature.sol\":\"DocumentSignature\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Timers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x29791a62950a7983e02a673639c1a781d1e448691800456c2ce4b99715391b14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/core/DocumentSignature.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./../interfaces/IDocumentSignature.sol\\\";\\n\\ncontract DocumentSignature is Ownable, IDocumentSignature, EIP712, ERC721URIStorage {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private idCount;\\n    mapping(uint256 => DocumentDetials) documentDetials;\\n    address userIdentityNFT;\\n    bytes32 public constant CAST_VOTE =\\n        keccak256(\\\"createDocument(uint256 tokenIds,uint256 documentId,string uri)\\\");\\n\\n    modifier onlyDocumentOwner(address owner) {\\n        if (owner != msg.sender) {\\n            revert DocumentSignature__OnlyOwnerCanCall();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _userIdentityNFT,\\n        string memory name,\\n        string memory symbol,\\n        string memory signingDomain,\\n        string memory signatureVersion\\n    ) ERC721(name, symbol) EIP712(signingDomain, signatureVersion) {\\n        userIdentityNFT = _userIdentityNFT;\\n    }\\n\\n    function createDocument(\\n        bytes memory name,\\n        bytes memory description,\\n        string memory uri,\\n        uint64 signatureStartingPeriod,\\n        uint64 signatureEndingingPeriod,\\n        uint256[] memory partiesTokenId\\n    ) public {\\n        if (ERC721(userIdentityNFT).balanceOf(msg.sender) == 1) {\\n            revert DocumentSignature__CreatorIdentityNotExit(msg.sender);\\n        }\\n        if (signatureEndingingPeriod == signatureStartingPeriod) {\\n            revert DocumentSignature__StartingAndEndingValuesNotSome(\\n                signatureEndingingPeriod,\\n                signatureStartingPeriod\\n            );\\n        }\\n        idCount.increment();\\n        // mapping(uint256 => SignatureStatus) storage parties;\\n        uint256 tokenId = idCount.current();\\n        uint256 documentId = _documentId(tokenId, name, description, partiesTokenId);\\n\\n        DocumentDetials storage _documentDetials = documentDetials[documentId];\\n        for (uint256 index = 0; index < partiesTokenId.length; index++) {\\n            Party memory p = Party(partiesTokenId[index], SignatureStatus.Deafult);\\n            // _documentDetials.parties[partiesTokenId[index]] = SignatureStatus.Deafult;\\n            _documentDetials.parties.push(p);\\n        }\\n        uint64 starting = toUint64(block.number) + signatureStartingPeriod;\\n        _documentDetials.signatureStart = _documentDetials.signatureEnd =\\n            starting +\\n            signatureEndingingPeriod;\\n        _documentDetials.name = name;\\n        _documentDetials.creator = msg.sender;\\n        _documentDetials.description = description;\\n        _documentDetials.status = DocumentState.Pending;\\n        _documentDetials.tokenId = tokenId;\\n        _safeMint(msg.sender, tokenId);\\n        _setTokenURI(tokenId, uri);\\n        emit DocumentedCrearted(tokenId, documentId, msg.sender);\\n    }\\n\\n    function processDocument(\\n        uint256 documentId,\\n        // uint256[] memory tokenIds,\\n        bytes[] memory signatures,\\n        bool isValidation\\n    ) public onlyDocumentOwner(documentDetials[documentId].creator) {\\n        // here we get signature response but oracle from off-chain\\n        bool isAllvalid = true;\\n        for (uint i = 0; i < documentDetials[documentId].parties.length; i++) {\\n            bytes32 digest = _hash(\\n                documentDetials[documentId].parties[i].tokenId,\\n                documentId,\\n                tokenURI(documentDetials[documentId].tokenId)\\n            );\\n            address signer = ECDSA.recover(digest, signatures[i]);\\n            if (\\n                isValidation &&\\n                signer !=\\n                ERC721(userIdentityNFT).ownerOf(documentDetials[documentId].parties[i].tokenId)\\n            ) {\\n                revert DocumentSignature__InValidSignature(\\n                    documentDetials[documentId].parties[i].tokenId\\n                );\\n            }\\n            if (\\n                !isValidation &&\\n                signer !=\\n                ERC721(userIdentityNFT).ownerOf(documentDetials[documentId].parties[i].tokenId)\\n            ) {\\n                documentDetials[documentId].parties[i].status = SignatureStatus.InValid;\\n                isAllvalid = false;\\n            } else {\\n                documentDetials[documentId].parties[i].status = SignatureStatus.Valid;\\n            }\\n        }\\n        if (isAllvalid) {\\n            documentDetials[documentId].status = DocumentState.Succeeded;\\n        } else {\\n            documentDetials[documentId].status = DocumentState.Executed;\\n        }\\n        emit DocumentProcess(documentId, isValidation);\\n    }\\n\\n    function getDocumentDetails(uint256 documentId) public view returns (DocumentDetials memory) {\\n        DocumentDetials memory _documentDetails = documentDetials[documentId];\\n        _documentDetails.status = getStatus(documentId);\\n        return _documentDetails;\\n    }\\n\\n    function checkMyCastedVote(uint256 documentId) public view returns (SignatureStatus) {\\n        bool isNotExist = false;\\n        for (uint i = 0; i < documentDetials[documentId].parties.length; i++) {\\n            if (\\n                msg.sender ==\\n                ERC721(userIdentityNFT).ownerOf(documentDetials[documentId].parties[i].tokenId)\\n            ) {\\n                return documentDetials[documentId].parties[i].status;\\n            }\\n        }\\n        if (!isNotExist) {\\n            revert DocumentSignature__UserNotExist();\\n        }\\n        return SignatureStatus.Deafult;\\n    }\\n\\n    function getDocumentStartingTime(uint256 documentId) public view returns (uint256) {\\n        return documentDetials[documentId].signatureStart;\\n    }\\n\\n    function getDocumentEndingingTime(uint256 documentId) public view returns (uint256) {\\n        return documentDetials[documentId].signatureEnd;\\n    }\\n\\n    function getStatus(uint256 documentId) public view returns (DocumentState) {\\n        if (\\n            documentDetials[documentId].status == DocumentState.Succeeded ||\\n            documentDetials[documentId].status == DocumentState.Executed\\n        ) {\\n            return documentDetials[documentId].status;\\n        }\\n\\n        if (documentDetials[documentId].signatureStart > toUint64(block.number)) {\\n            return DocumentState.Pending;\\n        }\\n        if (\\n            documentDetials[documentId].signatureStart <= toUint64(block.number) &&\\n            documentDetials[documentId].signatureEnd > toUint64(block.number)\\n        ) {\\n            return DocumentState.Active;\\n        }\\n        if (documentDetials[documentId].signatureEnd < toUint64(block.number)) {\\n            return DocumentState.Queued;\\n        }\\n        return DocumentState.Pending;\\n    }\\n\\n    function getCurrentTime() public view returns (uint256) {\\n        return toUint64(block.number);\\n    }\\n\\n    function _hash(\\n        uint256 tokenIds,\\n        uint256 documentId,\\n        string memory uri\\n    ) internal view returns (bytes32) {\\n        return _hashTypedDataV4(keccak256(abi.encode(CAST_VOTE, tokenIds, documentId, uri)));\\n    }\\n\\n    function _documentId(\\n        uint256 tokenId,\\n        bytes memory name,\\n        bytes memory description,\\n        uint256[] memory partiesTokenId\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(tokenId, name, description, partiesTokenId)));\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    // function createDocument(\\n    //     bytes memory name,\\n    //     bytes memory description,\\n    //     string memory uri,\\n    //     uint256 signatureStartingPeriod,\\n    //     uint256 signatureEndingingPeriod,\\n    //     uint256[] memory partiesName\\n    // ) external override {}\\n\\n    // constructor(string memory name, string memory version) override(EIP712, ERC721) {}\\n}\\n\",\"keccak256\":\"0x9b074f6d69cfe5a49d541e864859bf4ccd21e772e5f31780415cc2ffb793a6e5\",\"license\":\"MIT\"},\"contracts/interfaces/IDocumentSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/utils/Timers.sol\\\";\\n\\ninterface IDocumentSignature {\\n    //struct\\n    struct DocumentDetials {\\n        address creator;\\n        bytes name;\\n        uint256 tokenId;\\n        bytes description;\\n        // mapping(uint256 => SignatureStatus) parties;\\n        Party[] parties;\\n        DocumentState status;\\n        uint64 signatureStart;\\n        uint64 signatureEnd;\\n    }\\n    struct Party {\\n        uint256 tokenId;\\n        SignatureStatus status;\\n    }\\n    enum SignatureStatus {\\n        Deafult,\\n        Valid,\\n        InValid\\n    }\\n\\n    enum DocumentState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    //Events\\n    event DocumentedCrearted(\\n        uint256 indexed documentId,\\n        uint256 indexed tokenId,\\n        address indexed creator\\n    );\\n    event DocumentProcess(uint256 indexed documentId, bool indexed isValidation);\\n\\n    // Error\\n    error DocumentSignature__CreatorIdentityNotExit(address creator);\\n    error DocumentSignature__StartingAndEndingValuesNotSome(uint64 start, uint64 end);\\n    error DocumentSignature__InValidSignature(uint256 tokeId);\\n    error DocumentSignature__OnlyOwnerCanCall();\\n    error DocumentSignature__UserNotExist();\\n\\n    function createDocument(\\n        bytes memory name,\\n        bytes memory description,\\n        string memory uri,\\n        uint64 signatureStartingPeriod,\\n        uint64 signatureEndingingPeriod,\\n        uint256[] memory partiesTokenId\\n    ) external;\\n\\n    function processDocument(\\n        uint256 documentId,\\n        // uint256[] memory tokenIds,\\n        bytes[] memory signatures,\\n        bool isValidation\\n    ) external;\\n\\n    function getDocumentDetails(uint256 documentId) external returns (DocumentDetials memory);\\n\\n    function checkMyCastedVote(uint256 documentId) external returns (SignatureStatus);\\n\\n    function getDocumentStartingTime(uint256 documentId) external returns (uint256);\\n\\n    function getDocumentEndingingTime(uint256 documentId) external returns (uint256);\\n\\n    function getStatus(uint256 documentId) external returns (DocumentState);\\n\\n    function getCurrentTime() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5bd7c82c311f72659edea1d2942e2b4a02bfa692d38315a3f50d855ffc7b8e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162005fbb38038062005fbb833981810160405281019062000038919062000480565b838383836200005c620000506200018060201b60201c565b6200018860201b60201c565b60008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000c58184846200024c60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050806101208181525050505050505081600190816200011f9190620007cf565b508060029081620001319190620007cf565b50505084600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000950565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000838383463060405160200162000269959493929190620008f3565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c9826200029c565b9050919050565b620002db81620002bc565b8114620002e757600080fd5b50565b600081519050620002fb81620002d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000356826200030b565b810181811067ffffffffffffffff821117156200037857620003776200031c565b5b80604052505050565b60006200038d62000288565b90506200039b82826200034b565b919050565b600067ffffffffffffffff821115620003be57620003bd6200031c565b5b620003c9826200030b565b9050602081019050919050565b60005b83811015620003f6578082015181840152602081019050620003d9565b60008484015250505050565b6000620004196200041384620003a0565b62000381565b90508281526020810184848401111562000438576200043762000306565b5b62000445848285620003d6565b509392505050565b600082601f83011262000465576200046462000301565b5b81516200047784826020860162000402565b91505092915050565b600080600080600060a086880312156200049f576200049e62000292565b5b6000620004af88828901620002ea565b955050602086015167ffffffffffffffff811115620004d357620004d262000297565b5b620004e1888289016200044d565b945050604086015167ffffffffffffffff81111562000505576200050462000297565b5b62000513888289016200044d565b935050606086015167ffffffffffffffff81111562000537576200053662000297565b5b62000545888289016200044d565b925050608086015167ffffffffffffffff81111562000569576200056862000297565b5b62000577888289016200044d565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005d757607f821691505b602082108103620005ed57620005ec6200058f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000618565b62000663868362000618565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006b0620006aa620006a4846200067b565b62000685565b6200067b565b9050919050565b6000819050919050565b620006cc836200068f565b620006e4620006db82620006b7565b84845462000625565b825550505050565b600090565b620006fb620006ec565b62000708818484620006c1565b505050565b5b81811015620007305762000724600082620006f1565b6001810190506200070e565b5050565b601f8211156200077f576200074981620005f3565b620007548462000608565b8101602085101562000764578190505b6200077c620007738562000608565b8301826200070d565b50505b505050565b600082821c905092915050565b6000620007a46000198460080262000784565b1980831691505092915050565b6000620007bf838362000791565b9150826002028217905092915050565b620007da8262000584565b67ffffffffffffffff811115620007f657620007f56200031c565b5b620008028254620005be565b6200080f82828562000734565b600060209050601f83116001811462000847576000841562000832578287015190505b6200083e8582620007b1565b865550620008ae565b601f1984166200085786620005f3565b60005b8281101562000881578489015182556001820191506020850194506020810190506200085a565b86831015620008a157848901516200089d601f89168262000791565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b620008cb81620008b6565b82525050565b620008dc816200067b565b82525050565b620008ed81620002bc565b82525050565b600060a0820190506200090a6000830188620008c0565b620009196020830187620008c0565b620009286040830186620008c0565b620009376060830185620008d1565b620009466080830184620008e2565b9695505050505050565b60805160a05160c05160e051610100516101205161561b620009a06000396000613313015260006133550152600061333401526000613269015260006132bf015260006132e8015261561b6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063bf63d48e11610097578063cfefe9ff11610071578063cfefe9ff14610470578063e985e9c51461048c578063ececbbb1146104bc578063f2fde38b146104ec57610173565b8063bf63d48e14610406578063c87b56dd14610422578063c89bfa0b1461045257610173565b8063715018a61461035857806380ede329146103625780638da5cb5b1461039257806395d89b41146103b0578063a22cb465146103ce578063b88d4fde146103ea57610173565b806323b872dd1161013057806323b872dd1461027257806329cb924d1461028e57806342842e0e146102ac5780635c622a0e146102c85780636352211e146102f857806370a082311461032857610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f65780631916d695146102125780631fb919a314610242575b600080fd5b610192600480360381019061018d91906135bb565b610508565b60405161019f9190613603565b60405180910390f35b6101b06105ea565b6040516101bd91906136ae565b60405180910390f35b6101e060048036038101906101db9190613706565b61067c565b6040516101ed9190613774565b60405180910390f35b610210600480360381019061020b91906137bb565b6106c2565b005b61022c60048036038101906102279190613706565b6107d9565b604051610239919061380a565b60405180910390f35b61025c60048036038101906102579190613706565b610817565b604051610269919061380a565b60405180910390f35b61028c60048036038101906102879190613825565b610855565b005b6102966108b5565b6040516102a3919061380a565b60405180910390f35b6102c660048036038101906102c19190613825565b6108cf565b005b6102e260048036038101906102dd9190613706565b6108ef565b6040516102ef91906138ef565b60405180910390f35b610312600480360381019061030d9190613706565b610b1e565b60405161031f9190613774565b60405180910390f35b610342600480360381019061033d919061390a565b610ba4565b60405161034f919061380a565b60405180910390f35b610360610c5b565b005b61037c60048036038101906103779190613706565b610c6f565b6040516103899190613bc0565b60405180910390f35b61039a610fa2565b6040516103a79190613774565b60405180910390f35b6103b8610fcb565b6040516103c591906136ae565b60405180910390f35b6103e860048036038101906103e39190613c0e565b61105d565b005b61040460048036038101906103ff9190613d83565b611073565b005b610420600480360381019061041b9190613f9b565b6110d5565b005b61043c60048036038101906104379190613706565b611498565b60405161044991906136ae565b60405180910390f35b61045a6115aa565b60405161046791906140b1565b60405180910390f35b61048a600480360381019061048591906141ad565b6115ce565b005b6104a660048036038101906104a1919061421c565b611b62565b6040516104b39190613603565b60405180910390f35b6104d660048036038101906104d19190613706565b611bf6565b6040516104e3919061426b565b60405180910390f35b6105066004803603810190610501919061390a565b611dce565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e357506105e282611e51565b5b9050919050565b6060600180546105f9906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906142b5565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050905090565b600061068782611ebb565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106cd82610b1e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490614358565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661075c611f06565b73ffffffffffffffffffffffffffffffffffffffff16148061078b575061078a81610785611f06565b611b62565b5b6107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c1906143ea565b60405180910390fd5b6107d48383611f0e565b505050565b60006009600083815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60006009600083815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b610866610860611f06565b82611fc7565b6108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c9061447c565b60405180910390fd5b6108b083838361205c565b505050565b60006108c043612355565b67ffffffffffffffff16905090565b6108ea83838360405180602001604052806000815250611073565b505050565b60006004600781111561090557610904613878565b5b6009600084815260200190815260200160002060050160009054906101000a900460ff16600781111561093b5761093a613878565b5b148061098d575060078081111561095557610954613878565b5b6009600084815260200190815260200160002060050160009054906101000a900460ff16600781111561098b5761098a613878565b5b145b156109bd576009600083815260200190815260200160002060050160009054906101000a900460ff169050610b19565b6109c643612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff161115610a145760009050610b19565b610a1d43612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1611158015610aaf5750610a6e43612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff16115b15610abd5760019050610b19565b610ac643612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff161015610b145760059050610b19565b600090505b919050565b600080610b2a836123ac565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b92906144e8565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b9061457a565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c636123e9565b610c6d6000612467565b565b610c776134ce565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610cfe906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2a906142b5565b8015610d775780601f10610d4c57610100808354040283529160200191610d77565b820191906000526020600020905b815481529060010190602001808311610d5a57829003601f168201915b5050505050815260200160028201548152602001600382018054610d9a906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc6906142b5565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610eb85783829060005260206000209060020201604051806040016040529081600082015481526020016001820160009054906101000a900460ff166002811115610e9357610e92613878565b5b6002811115610ea557610ea4613878565b5b8152505081526020019060010190610e41565b5050505081526020016005820160009054906101000a900460ff166007811115610ee557610ee4613878565b5b6007811115610ef757610ef6613878565b5b81526020016005820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160099054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050610f6a836108ef565b8160a001906007811115610f8157610f80613878565b5b90816007811115610f9557610f94613878565b5b8152505080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610fda906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611006906142b5565b80156110535780601f1061102857610100808354040283529160200191611053565b820191906000526020600020905b81548152906001019060200180831161103657829003601f168201915b5050505050905090565b61106f611068611f06565b838361252b565b5050565b61108461107e611f06565b83611fc7565b6110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba9061447c565b60405180910390fd5b6110cf84848484612697565b50505050565b6001600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016111329190613774565b602060405180830381865afa15801561114f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117391906145af565b036111b557336040517fdf0dff290000000000000000000000000000000000000000000000000000000081526004016111ac9190613774565b60405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff160361120f5781836040517fd659fe1c0000000000000000000000000000000000000000000000000000000081526004016112069291906145eb565b60405180910390fd5b61121960086126f3565b60006112256008612709565b9050600061123582898986612717565b9050600060096000838152602001908152602001600020905060005b845181101561131e576000604051806040016040528087848151811061127a57611279614614565b5b602002602001015181526020016000600281111561129b5761129a613878565b5b8152509050826004018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548160ff0219169083600281111561130357611302613878565b5b0217905550505050808061131690614672565b915050611251565b5060008661132b43612355565b61133591906146ba565b9050858161134391906146ba565b8260050160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790558260050160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550898260010190816113a791906148a2565b50338260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888260030190816113fc91906148a2565b5060008260050160006101000a81548160ff0219169083600781111561142557611424613878565b5b021790555083826002018190555061143d3385612753565b6114478489612771565b3373ffffffffffffffffffffffffffffffffffffffff1683857fcaec28d2fd95bea310e5592e0b1879eaa1f2cb5d30b0b7c4fabc645d86857c7f60405160405180910390a450505050505050505050565b60606114a382611ebb565b60006007600084815260200190815260200160002080546114c3906142b5565b80601f01602080910402602001604051908101604052809291908181526020018280546114ef906142b5565b801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b50505050509050600061154d6127de565b905060008151036115625781925050506115a5565b60008251111561159757808260405160200161157f9291906149b0565b604051602081830303815290604052925050506115a5565b6115a0846127f5565b925050505b919050565b7fb9bf276e5ec6559208edd42c1d66f106a1fc3b0b26800d0624ece8adc41e9a5481565b6009600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461166a576040517fe7d87f6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001905060005b6009600087815260200190815260200160002060040180549050811015611aa05760006116f86009600089815260200190815260200160002060040183815481106116c1576116c0614614565b5b906000526020600020906002020160000154886116f3600960008c815260200190815260200160002060020154611498565b61285d565b905060006117208288858151811061171357611712614614565b5b60200260200101516128bd565b905085801561182f5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008b815260200190815260200160002060040185815481106117905761178f614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b81526004016117be919061380a565b602060405180830381865afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff91906149e9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156118aa5760096000898152602001908152602001600020600401838154811061185c5761185b614614565b5b9060005260206000209060020201600001546040517f928348d00000000000000000000000000000000000000000000000000000000081526004016118a1919061380a565b60405180910390fd5b851580156119b85750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008b8152602001908152602001600020600401858154811061191957611918614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b8152600401611947919061380a565b602060405180830381865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198891906149e9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15611a28576002600960008a815260200190815260200160002060040184815481106119e7576119e6614614565b5b906000526020600020906002020160010160006101000a81548160ff02191690836002811115611a1a57611a19613878565b5b021790555060009350611a8b565b6001600960008a81526020019081526020016000206004018481548110611a5257611a51614614565b5b906000526020600020906002020160010160006101000a81548160ff02191690836002811115611a8557611a84613878565b5b02179055505b50508080611a9890614672565b915050611673565b508015611aeb5760046009600087815260200190815260200160002060050160006101000a81548160ff02191690836007811115611ae157611ae0613878565b5b0217905550611b2b565b60076009600087815260200190815260200160002060050160006101000a81548160ff02191690836007811115611b2557611b24613878565b5b02179055505b821515857fec2387823ccca09443483ed3c62f09982d5a6fd9c10a7fc7bdfe58811cf3da3960405160405180910390a35050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000905060005b6009600085815260200190815260200160002060040180549050811015611d8b57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008781526020019081526020016000206004018381548110611c8757611c86614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b8152600401611cb5919061380a565b602060405180830381865afa158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf691906149e9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611d7857600960008581526020019081526020016000206004018181548110611d5057611d4f614614565b5b906000526020600020906002020160010160009054906101000a900460ff1692505050611dc9565b8080611d8390614672565b915050611c00565b5080611dc3576040517fe4e5ff6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009150505b919050565b611dd66123e9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90614a88565b60405180910390fd5b611e4e81612467565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611ec4816128e4565b611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa906144e8565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f8183610b1e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611fd383610b1e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061201557506120148185611b62565b5b8061205357508373ffffffffffffffffffffffffffffffffffffffff1661203b8461067c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661207c82610b1e565b73ffffffffffffffffffffffffffffffffffffffff16146120d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c990614b1a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213890614bac565b60405180910390fd5b61214e8383836001612925565b8273ffffffffffffffffffffffffffffffffffffffff1661216e82610b1e565b73ffffffffffffffffffffffffffffffffffffffff16146121c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bb90614b1a565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123508383836001612a4b565b505050565b600067ffffffffffffffff80168211156123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614c3e565b60405180910390fd5b819050919050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6123f1611f06565b73ffffffffffffffffffffffffffffffffffffffff1661240f610fa2565b73ffffffffffffffffffffffffffffffffffffffff1614612465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245c90614caa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259090614d16565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161268a9190613603565b60405180910390a3505050565b6126a284848461205c565b6126ae84848484612a51565b6126ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e490614da8565b60405180910390fd5b50505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000848484846040516020016127309493929190614ec1565b6040516020818303038152906040528051906020012060001c9050949350505050565b61276d828260405180602001604052806000815250612bd8565b5050565b61277a826128e4565b6127b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b090614f8d565b60405180910390fd5b806007600084815260200190815260200160002090816127d99190615008565b505050565b606060405180602001604052806000815250905090565b606061280082611ebb565b600061280a6127de565b9050600081511161282a5760405180602001604052806000815250612855565b8061283484612c33565b6040516020016128459291906149b0565b6040516020818303038152906040525b915050919050565b60006128b47fb9bf276e5ec6559208edd42c1d66f106a1fc3b0b26800d0624ece8adc41e9a5485858560405160200161289994939291906150da565b60405160208183030381529060405280519060200120612d01565b90509392505050565b60008060006128cc8585612d1b565b915091506128d981612d6c565b819250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16612906836123ac565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612a4557600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129b95780600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129b19190615126565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612a445780600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a3c919061515a565b925050819055505b5b50505050565b50505050565b6000612a728473ffffffffffffffffffffffffffffffffffffffff16612ed2565b15612bcb578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a9b611f06565b8786866040518563ffffffff1660e01b8152600401612abd949392919061518e565b6020604051808303816000875af1925050508015612af957506040513d601f19601f82011682018060405250810190612af691906151ef565b60015b612b7b573d8060008114612b29576040519150601f19603f3d011682016040523d82523d6000602084013e612b2e565b606091505b506000815103612b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6a90614da8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612bd0565b600190505b949350505050565b612be28383612ef5565b612bef6000848484612a51565b612c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2590614da8565b60405180910390fd5b505050565b606060006001612c4284613112565b01905060008167ffffffffffffffff811115612c6157612c60613c58565b5b6040519080825280601f01601f191660200182016040528015612c935781602001600182028036833780820191505090505b509050600082602001820190505b600115612cf6578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cea57612ce961521c565b5b04945060008503612ca1575b819350505050919050565b6000612d14612d0e613265565b8361337f565b9050919050565b6000806041835103612d5c5760008060006020860151925060408601519150606086015160001a9050612d50878285856133b2565b94509450505050612d65565b60006002915091505b9250929050565b60006004811115612d8057612d7f613878565b5b816004811115612d9357612d92613878565b5b0315612ecf5760016004811115612dad57612dac613878565b5b816004811115612dc057612dbf613878565b5b03612e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df790615297565b60405180910390fd5b60026004811115612e1457612e13613878565b5b816004811115612e2757612e26613878565b5b03612e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5e90615303565b60405180910390fd5b60036004811115612e7b57612e7a613878565b5b816004811115612e8e57612e8d613878565b5b03612ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec590615395565b60405180910390fd5b5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5b90615401565b60405180910390fd5b612f6d816128e4565b15612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa49061546d565b60405180910390fd5b612fbb600083836001612925565b612fc4816128e4565b15613004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ffb9061546d565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461310e600083836001612a4b565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613170577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816131665761316561521c565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131ad576d04ee2d6d415b85acef810000000083816131a3576131a261521c565b5b0492506020810190505b662386f26fc1000083106131dc57662386f26fc1000083816131d2576131d161521c565b5b0492506010810190505b6305f5e1008310613205576305f5e10083816131fb576131fa61521c565b5b0492506008810190505b612710831061322a5761271083816132205761321f61521c565b5b0492506004810190505b6064831061324d57606483816132435761324261521c565b5b0492506002810190505b600a831061325c576001810190505b80915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156132e157507f000000000000000000000000000000000000000000000000000000000000000046145b1561330e577f0000000000000000000000000000000000000000000000000000000000000000905061337c565b6133797f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613494565b90505b90565b600082826040516020016133949291906154fa565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156133ed57600060039150915061348b565b600060018787878760405160008152602001604052604051613412949392919061554d565b6020604051602081039080840390855afa158015613434573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036134825760006001925092505061348b565b80600092509250505b94509492505050565b600083838346306040516020016134af959493929190615592565b6040516020818303038152906040528051906020012090509392505050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001606081526020016000600781111561352757613526613878565b5b8152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61359881613563565b81146135a357600080fd5b50565b6000813590506135b58161358f565b92915050565b6000602082840312156135d1576135d0613559565b5b60006135df848285016135a6565b91505092915050565b60008115159050919050565b6135fd816135e8565b82525050565b600060208201905061361860008301846135f4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561365857808201518184015260208101905061363d565b60008484015250505050565b6000601f19601f8301169050919050565b60006136808261361e565b61368a8185613629565b935061369a81856020860161363a565b6136a381613664565b840191505092915050565b600060208201905081810360008301526136c88184613675565b905092915050565b6000819050919050565b6136e3816136d0565b81146136ee57600080fd5b50565b600081359050613700816136da565b92915050565b60006020828403121561371c5761371b613559565b5b600061372a848285016136f1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061375e82613733565b9050919050565b61376e81613753565b82525050565b60006020820190506137896000830184613765565b92915050565b61379881613753565b81146137a357600080fd5b50565b6000813590506137b58161378f565b92915050565b600080604083850312156137d2576137d1613559565b5b60006137e0858286016137a6565b92505060206137f1858286016136f1565b9150509250929050565b613804816136d0565b82525050565b600060208201905061381f60008301846137fb565b92915050565b60008060006060848603121561383e5761383d613559565b5b600061384c868287016137a6565b935050602061385d868287016137a6565b925050604061386e868287016136f1565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600881106138b8576138b7613878565b5b50565b60008190506138c9826138a7565b919050565b60006138d9826138bb565b9050919050565b6138e9816138ce565b82525050565b600060208201905061390460008301846138e0565b92915050565b6000602082840312156139205761391f613559565b5b600061392e848285016137a6565b91505092915050565b61394081613753565b82525050565b600081519050919050565b600082825260208201905092915050565b600061396d82613946565b6139778185613951565b935061398781856020860161363a565b61399081613664565b840191505092915050565b6139a4816136d0565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600381106139e7576139e6613878565b5b50565b60008190506139f8826139d6565b919050565b6000613a08826139ea565b9050919050565b613a18816139fd565b82525050565b604082016000820151613a34600085018261399b565b506020820151613a476020850182613a0f565b50505050565b6000613a598383613a1e565b60408301905092915050565b6000602082019050919050565b6000613a7d826139aa565b613a8781856139b5565b9350613a92836139c6565b8060005b83811015613ac3578151613aaa8882613a4d565b9750613ab583613a65565b925050600181019050613a96565b5085935050505092915050565b613ad9816138ce565b82525050565b600067ffffffffffffffff82169050919050565b613afc81613adf565b82525050565b600061010083016000830151613b1b6000860182613937565b5060208301518482036020860152613b338282613962565b9150506040830151613b48604086018261399b565b5060608301518482036060860152613b608282613962565b91505060808301518482036080860152613b7a8282613a72565b91505060a0830151613b8f60a0860182613ad0565b5060c0830151613ba260c0860182613af3565b5060e0830151613bb560e0860182613af3565b508091505092915050565b60006020820190508181036000830152613bda8184613b02565b905092915050565b613beb816135e8565b8114613bf657600080fd5b50565b600081359050613c0881613be2565b92915050565b60008060408385031215613c2557613c24613559565b5b6000613c33858286016137a6565b9250506020613c4485828601613bf9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c9082613664565b810181811067ffffffffffffffff82111715613caf57613cae613c58565b5b80604052505050565b6000613cc261354f565b9050613cce8282613c87565b919050565b600067ffffffffffffffff821115613cee57613ced613c58565b5b613cf782613664565b9050602081019050919050565b82818337600083830152505050565b6000613d26613d2184613cd3565b613cb8565b905082815260208101848484011115613d4257613d41613c53565b5b613d4d848285613d04565b509392505050565b600082601f830112613d6a57613d69613c4e565b5b8135613d7a848260208601613d13565b91505092915050565b60008060008060808587031215613d9d57613d9c613559565b5b6000613dab878288016137a6565b9450506020613dbc878288016137a6565b9350506040613dcd878288016136f1565b925050606085013567ffffffffffffffff811115613dee57613ded61355e565b5b613dfa87828801613d55565b91505092959194509250565b600067ffffffffffffffff821115613e2157613e20613c58565b5b613e2a82613664565b9050602081019050919050565b6000613e4a613e4584613e06565b613cb8565b905082815260208101848484011115613e6657613e65613c53565b5b613e71848285613d04565b509392505050565b600082601f830112613e8e57613e8d613c4e565b5b8135613e9e848260208601613e37565b91505092915050565b613eb081613adf565b8114613ebb57600080fd5b50565b600081359050613ecd81613ea7565b92915050565b600067ffffffffffffffff821115613eee57613eed613c58565b5b602082029050602081019050919050565b600080fd5b6000613f17613f1284613ed3565b613cb8565b90508083825260208201905060208402830185811115613f3a57613f39613eff565b5b835b81811015613f635780613f4f88826136f1565b845260208401935050602081019050613f3c565b5050509392505050565b600082601f830112613f8257613f81613c4e565b5b8135613f92848260208601613f04565b91505092915050565b60008060008060008060c08789031215613fb857613fb7613559565b5b600087013567ffffffffffffffff811115613fd657613fd561355e565b5b613fe289828a01613d55565b965050602087013567ffffffffffffffff8111156140035761400261355e565b5b61400f89828a01613d55565b955050604087013567ffffffffffffffff8111156140305761402f61355e565b5b61403c89828a01613e79565b945050606061404d89828a01613ebe565b935050608061405e89828a01613ebe565b92505060a087013567ffffffffffffffff81111561407f5761407e61355e565b5b61408b89828a01613f6d565b9150509295509295509295565b6000819050919050565b6140ab81614098565b82525050565b60006020820190506140c660008301846140a2565b92915050565b600067ffffffffffffffff8211156140e7576140e6613c58565b5b602082029050602081019050919050565b600061410b614106846140cc565b613cb8565b9050808382526020820190506020840283018581111561412e5761412d613eff565b5b835b8181101561417557803567ffffffffffffffff81111561415357614152613c4e565b5b8086016141608982613d55565b85526020850194505050602081019050614130565b5050509392505050565b600082601f83011261419457614193613c4e565b5b81356141a48482602086016140f8565b91505092915050565b6000806000606084860312156141c6576141c5613559565b5b60006141d4868287016136f1565b935050602084013567ffffffffffffffff8111156141f5576141f461355e565b5b6142018682870161417f565b925050604061421286828701613bf9565b9150509250925092565b6000806040838503121561423357614232613559565b5b6000614241858286016137a6565b9250506020614252858286016137a6565b9150509250929050565b614265816139fd565b82525050565b6000602082019050614280600083018461425c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142cd57607f821691505b6020821081036142e0576142df614286565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614342602183613629565b915061434d826142e6565b604082019050919050565b6000602082019050818103600083015261437181614335565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006143d4603d83613629565b91506143df82614378565b604082019050919050565b60006020820190508181036000830152614403816143c7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614466602d83613629565b91506144718261440a565b604082019050919050565b6000602082019050818103600083015261449581614459565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006144d2601883613629565b91506144dd8261449c565b602082019050919050565b60006020820190508181036000830152614501816144c5565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614564602983613629565b915061456f82614508565b604082019050919050565b6000602082019050818103600083015261459381614557565b9050919050565b6000815190506145a9816136da565b92915050565b6000602082840312156145c5576145c4613559565b5b60006145d38482850161459a565b91505092915050565b6145e581613adf565b82525050565b600060408201905061460060008301856145dc565b61460d60208301846145dc565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061467d826136d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036146af576146ae614643565b5b600182019050919050565b60006146c582613adf565b91506146d083613adf565b9250828201905067ffffffffffffffff8111156146f0576146ef614643565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261471b565b614762868361471b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061479f61479a614795846136d0565b61477a565b6136d0565b9050919050565b6000819050919050565b6147b983614784565b6147cd6147c5826147a6565b848454614728565b825550505050565b600090565b6147e26147d5565b6147ed8184846147b0565b505050565b5b81811015614811576148066000826147da565b6001810190506147f3565b5050565b601f82111561485657614827816146f6565b6148308461470b565b8101602085101561483f578190505b61485361484b8561470b565b8301826147f2565b50505b505050565b600082821c905092915050565b60006148796000198460080261485b565b1980831691505092915050565b60006148928383614868565b9150826002028217905092915050565b6148ab82613946565b67ffffffffffffffff8111156148c4576148c3613c58565b5b6148ce82546142b5565b6148d9828285614815565b600060209050601f83116001811461490c57600084156148fa578287015190505b6149048582614886565b86555061496c565b601f19841661491a866146f6565b60005b828110156149425784890151825560018201915060208501945060208101905061491d565b8683101561495f578489015161495b601f891682614868565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061498a8261361e565b6149948185614974565b93506149a481856020860161363a565b80840191505092915050565b60006149bc828561497f565b91506149c8828461497f565b91508190509392505050565b6000815190506149e38161378f565b92915050565b6000602082840312156149ff576149fe613559565b5b6000614a0d848285016149d4565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a72602683613629565b9150614a7d82614a16565b604082019050919050565b60006020820190508181036000830152614aa181614a65565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614b04602583613629565b9150614b0f82614aa8565b604082019050919050565b60006020820190508181036000830152614b3381614af7565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b96602483613629565b9150614ba182614b3a565b604082019050919050565b60006020820190508181036000830152614bc581614b89565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203660008201527f3420626974730000000000000000000000000000000000000000000000000000602082015250565b6000614c28602683613629565b9150614c3382614bcc565b604082019050919050565b60006020820190508181036000830152614c5781614c1b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c94602083613629565b9150614c9f82614c5e565b602082019050919050565b60006020820190508181036000830152614cc381614c87565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614d00601983613629565b9150614d0b82614cca565b602082019050919050565b60006020820190508181036000830152614d2f81614cf3565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614d92603283613629565b9150614d9d82614d36565b604082019050919050565b60006020820190508181036000830152614dc181614d85565b9050919050565b600082825260208201905092915050565b6000614de482613946565b614dee8185614dc8565b9350614dfe81856020860161363a565b614e0781613664565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614e4a838361399b565b60208301905092915050565b6000602082019050919050565b6000614e6e82614e12565b614e788185614e1d565b9350614e8383614e2e565b8060005b83811015614eb4578151614e9b8882614e3e565b9750614ea683614e56565b925050600181019050614e87565b5085935050505092915050565b6000608082019050614ed660008301876137fb565b8181036020830152614ee88186614dd9565b90508181036040830152614efc8185614dd9565b90508181036060830152614f108184614e63565b905095945050505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614f77602e83613629565b9150614f8282614f1b565b604082019050919050565b60006020820190508181036000830152614fa681614f6a565b9050919050565b60008190508160005260206000209050919050565b601f82111561500357614fd481614fad565b614fdd8461470b565b81016020851015614fec578190505b615000614ff88561470b565b8301826147f2565b50505b505050565b6150118261361e565b67ffffffffffffffff81111561502a57615029613c58565b5b61503482546142b5565b61503f828285614fc2565b600060209050601f8311600181146150725760008415615060578287015190505b61506a8582614886565b8655506150d2565b601f19841661508086614fad565b60005b828110156150a857848901518255600182019150602085019450602081019050615083565b868310156150c557848901516150c1601f891682614868565b8355505b6001600288020188555050505b505050505050565b60006080820190506150ef60008301876140a2565b6150fc60208301866137fb565b61510960408301856137fb565b818103606083015261511b8184613675565b905095945050505050565b6000615131826136d0565b915061513c836136d0565b925082820390508181111561515457615153614643565b5b92915050565b6000615165826136d0565b9150615170836136d0565b925082820190508082111561518857615187614643565b5b92915050565b60006080820190506151a36000830187613765565b6151b06020830186613765565b6151bd60408301856137fb565b81810360608301526151cf8184614dd9565b905095945050505050565b6000815190506151e98161358f565b92915050565b60006020828403121561520557615204613559565b5b6000615213848285016151da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615281601883613629565b915061528c8261524b565b602082019050919050565b600060208201905081810360008301526152b081615274565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006152ed601f83613629565b91506152f8826152b7565b602082019050919050565b6000602082019050818103600083015261531c816152e0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061537f602283613629565b915061538a82615323565b604082019050919050565b600060208201905081810360008301526153ae81615372565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153eb602083613629565b91506153f6826153b5565b602082019050919050565b6000602082019050818103600083015261541a816153de565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615457601c83613629565b915061546282615421565b602082019050919050565b600060208201905081810360008301526154868161544a565b9050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006154c3600283614974565b91506154ce8261548d565b600282019050919050565b6000819050919050565b6154f46154ef82614098565b6154d9565b82525050565b6000615505826154b6565b915061551182856154e3565b60208201915061552182846154e3565b6020820191508190509392505050565b600060ff82169050919050565b61554781615531565b82525050565b600060808201905061556260008301876140a2565b61556f602083018661553e565b61557c60408301856140a2565b61558960608301846140a2565b95945050505050565b600060a0820190506155a760008301886140a2565b6155b460208301876140a2565b6155c160408301866140a2565b6155ce60608301856137fb565b6155db6080830184613765565b969550505050505056fea26469706673582212202e530a530926d29ffee2b3c5e3ff0c01955a1ffffc77595eff5a9e8ab145668d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063bf63d48e11610097578063cfefe9ff11610071578063cfefe9ff14610470578063e985e9c51461048c578063ececbbb1146104bc578063f2fde38b146104ec57610173565b8063bf63d48e14610406578063c87b56dd14610422578063c89bfa0b1461045257610173565b8063715018a61461035857806380ede329146103625780638da5cb5b1461039257806395d89b41146103b0578063a22cb465146103ce578063b88d4fde146103ea57610173565b806323b872dd1161013057806323b872dd1461027257806329cb924d1461028e57806342842e0e146102ac5780635c622a0e146102c85780636352211e146102f857806370a082311461032857610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f65780631916d695146102125780631fb919a314610242575b600080fd5b610192600480360381019061018d91906135bb565b610508565b60405161019f9190613603565b60405180910390f35b6101b06105ea565b6040516101bd91906136ae565b60405180910390f35b6101e060048036038101906101db9190613706565b61067c565b6040516101ed9190613774565b60405180910390f35b610210600480360381019061020b91906137bb565b6106c2565b005b61022c60048036038101906102279190613706565b6107d9565b604051610239919061380a565b60405180910390f35b61025c60048036038101906102579190613706565b610817565b604051610269919061380a565b60405180910390f35b61028c60048036038101906102879190613825565b610855565b005b6102966108b5565b6040516102a3919061380a565b60405180910390f35b6102c660048036038101906102c19190613825565b6108cf565b005b6102e260048036038101906102dd9190613706565b6108ef565b6040516102ef91906138ef565b60405180910390f35b610312600480360381019061030d9190613706565b610b1e565b60405161031f9190613774565b60405180910390f35b610342600480360381019061033d919061390a565b610ba4565b60405161034f919061380a565b60405180910390f35b610360610c5b565b005b61037c60048036038101906103779190613706565b610c6f565b6040516103899190613bc0565b60405180910390f35b61039a610fa2565b6040516103a79190613774565b60405180910390f35b6103b8610fcb565b6040516103c591906136ae565b60405180910390f35b6103e860048036038101906103e39190613c0e565b61105d565b005b61040460048036038101906103ff9190613d83565b611073565b005b610420600480360381019061041b9190613f9b565b6110d5565b005b61043c60048036038101906104379190613706565b611498565b60405161044991906136ae565b60405180910390f35b61045a6115aa565b60405161046791906140b1565b60405180910390f35b61048a600480360381019061048591906141ad565b6115ce565b005b6104a660048036038101906104a1919061421c565b611b62565b6040516104b39190613603565b60405180910390f35b6104d660048036038101906104d19190613706565b611bf6565b6040516104e3919061426b565b60405180910390f35b6105066004803603810190610501919061390a565b611dce565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e357506105e282611e51565b5b9050919050565b6060600180546105f9906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906142b5565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050905090565b600061068782611ebb565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106cd82610b1e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490614358565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661075c611f06565b73ffffffffffffffffffffffffffffffffffffffff16148061078b575061078a81610785611f06565b611b62565b5b6107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c1906143ea565b60405180910390fd5b6107d48383611f0e565b505050565b60006009600083815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60006009600083815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b610866610860611f06565b82611fc7565b6108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c9061447c565b60405180910390fd5b6108b083838361205c565b505050565b60006108c043612355565b67ffffffffffffffff16905090565b6108ea83838360405180602001604052806000815250611073565b505050565b60006004600781111561090557610904613878565b5b6009600084815260200190815260200160002060050160009054906101000a900460ff16600781111561093b5761093a613878565b5b148061098d575060078081111561095557610954613878565b5b6009600084815260200190815260200160002060050160009054906101000a900460ff16600781111561098b5761098a613878565b5b145b156109bd576009600083815260200190815260200160002060050160009054906101000a900460ff169050610b19565b6109c643612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff161115610a145760009050610b19565b610a1d43612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1611158015610aaf5750610a6e43612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff16115b15610abd5760019050610b19565b610ac643612355565b67ffffffffffffffff166009600084815260200190815260200160002060050160099054906101000a900467ffffffffffffffff1667ffffffffffffffff161015610b145760059050610b19565b600090505b919050565b600080610b2a836123ac565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b92906144e8565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b9061457a565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c636123e9565b610c6d6000612467565b565b610c776134ce565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610cfe906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2a906142b5565b8015610d775780601f10610d4c57610100808354040283529160200191610d77565b820191906000526020600020905b815481529060010190602001808311610d5a57829003601f168201915b5050505050815260200160028201548152602001600382018054610d9a906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc6906142b5565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610eb85783829060005260206000209060020201604051806040016040529081600082015481526020016001820160009054906101000a900460ff166002811115610e9357610e92613878565b5b6002811115610ea557610ea4613878565b5b8152505081526020019060010190610e41565b5050505081526020016005820160009054906101000a900460ff166007811115610ee557610ee4613878565b5b6007811115610ef757610ef6613878565b5b81526020016005820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160099054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050610f6a836108ef565b8160a001906007811115610f8157610f80613878565b5b90816007811115610f9557610f94613878565b5b8152505080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610fda906142b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611006906142b5565b80156110535780601f1061102857610100808354040283529160200191611053565b820191906000526020600020905b81548152906001019060200180831161103657829003601f168201915b5050505050905090565b61106f611068611f06565b838361252b565b5050565b61108461107e611f06565b83611fc7565b6110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba9061447c565b60405180910390fd5b6110cf84848484612697565b50505050565b6001600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016111329190613774565b602060405180830381865afa15801561114f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117391906145af565b036111b557336040517fdf0dff290000000000000000000000000000000000000000000000000000000081526004016111ac9190613774565b60405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff160361120f5781836040517fd659fe1c0000000000000000000000000000000000000000000000000000000081526004016112069291906145eb565b60405180910390fd5b61121960086126f3565b60006112256008612709565b9050600061123582898986612717565b9050600060096000838152602001908152602001600020905060005b845181101561131e576000604051806040016040528087848151811061127a57611279614614565b5b602002602001015181526020016000600281111561129b5761129a613878565b5b8152509050826004018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548160ff0219169083600281111561130357611302613878565b5b0217905550505050808061131690614672565b915050611251565b5060008661132b43612355565b61133591906146ba565b9050858161134391906146ba565b8260050160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790558260050160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550898260010190816113a791906148a2565b50338260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888260030190816113fc91906148a2565b5060008260050160006101000a81548160ff0219169083600781111561142557611424613878565b5b021790555083826002018190555061143d3385612753565b6114478489612771565b3373ffffffffffffffffffffffffffffffffffffffff1683857fcaec28d2fd95bea310e5592e0b1879eaa1f2cb5d30b0b7c4fabc645d86857c7f60405160405180910390a450505050505050505050565b60606114a382611ebb565b60006007600084815260200190815260200160002080546114c3906142b5565b80601f01602080910402602001604051908101604052809291908181526020018280546114ef906142b5565b801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b50505050509050600061154d6127de565b905060008151036115625781925050506115a5565b60008251111561159757808260405160200161157f9291906149b0565b604051602081830303815290604052925050506115a5565b6115a0846127f5565b925050505b919050565b7fb9bf276e5ec6559208edd42c1d66f106a1fc3b0b26800d0624ece8adc41e9a5481565b6009600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461166a576040517fe7d87f6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001905060005b6009600087815260200190815260200160002060040180549050811015611aa05760006116f86009600089815260200190815260200160002060040183815481106116c1576116c0614614565b5b906000526020600020906002020160000154886116f3600960008c815260200190815260200160002060020154611498565b61285d565b905060006117208288858151811061171357611712614614565b5b60200260200101516128bd565b905085801561182f5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008b815260200190815260200160002060040185815481106117905761178f614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b81526004016117be919061380a565b602060405180830381865afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff91906149e9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156118aa5760096000898152602001908152602001600020600401838154811061185c5761185b614614565b5b9060005260206000209060020201600001546040517f928348d00000000000000000000000000000000000000000000000000000000081526004016118a1919061380a565b60405180910390fd5b851580156119b85750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008b8152602001908152602001600020600401858154811061191957611918614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b8152600401611947919061380a565b602060405180830381865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198891906149e9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15611a28576002600960008a815260200190815260200160002060040184815481106119e7576119e6614614565b5b906000526020600020906002020160010160006101000a81548160ff02191690836002811115611a1a57611a19613878565b5b021790555060009350611a8b565b6001600960008a81526020019081526020016000206004018481548110611a5257611a51614614565b5b906000526020600020906002020160010160006101000a81548160ff02191690836002811115611a8557611a84613878565b5b02179055505b50508080611a9890614672565b915050611673565b508015611aeb5760046009600087815260200190815260200160002060050160006101000a81548160ff02191690836007811115611ae157611ae0613878565b5b0217905550611b2b565b60076009600087815260200190815260200160002060050160006101000a81548160ff02191690836007811115611b2557611b24613878565b5b02179055505b821515857fec2387823ccca09443483ed3c62f09982d5a6fd9c10a7fc7bdfe58811cf3da3960405160405180910390a35050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000905060005b6009600085815260200190815260200160002060040180549050811015611d8b57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600960008781526020019081526020016000206004018381548110611c8757611c86614614565b5b9060005260206000209060020201600001546040518263ffffffff1660e01b8152600401611cb5919061380a565b602060405180830381865afa158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf691906149e9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611d7857600960008581526020019081526020016000206004018181548110611d5057611d4f614614565b5b906000526020600020906002020160010160009054906101000a900460ff1692505050611dc9565b8080611d8390614672565b915050611c00565b5080611dc3576040517fe4e5ff6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009150505b919050565b611dd66123e9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90614a88565b60405180910390fd5b611e4e81612467565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611ec4816128e4565b611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa906144e8565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f8183610b1e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611fd383610b1e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061201557506120148185611b62565b5b8061205357508373ffffffffffffffffffffffffffffffffffffffff1661203b8461067c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661207c82610b1e565b73ffffffffffffffffffffffffffffffffffffffff16146120d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c990614b1a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213890614bac565b60405180910390fd5b61214e8383836001612925565b8273ffffffffffffffffffffffffffffffffffffffff1661216e82610b1e565b73ffffffffffffffffffffffffffffffffffffffff16146121c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bb90614b1a565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123508383836001612a4b565b505050565b600067ffffffffffffffff80168211156123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614c3e565b60405180910390fd5b819050919050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6123f1611f06565b73ffffffffffffffffffffffffffffffffffffffff1661240f610fa2565b73ffffffffffffffffffffffffffffffffffffffff1614612465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245c90614caa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259090614d16565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161268a9190613603565b60405180910390a3505050565b6126a284848461205c565b6126ae84848484612a51565b6126ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e490614da8565b60405180910390fd5b50505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000848484846040516020016127309493929190614ec1565b6040516020818303038152906040528051906020012060001c9050949350505050565b61276d828260405180602001604052806000815250612bd8565b5050565b61277a826128e4565b6127b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b090614f8d565b60405180910390fd5b806007600084815260200190815260200160002090816127d99190615008565b505050565b606060405180602001604052806000815250905090565b606061280082611ebb565b600061280a6127de565b9050600081511161282a5760405180602001604052806000815250612855565b8061283484612c33565b6040516020016128459291906149b0565b6040516020818303038152906040525b915050919050565b60006128b47fb9bf276e5ec6559208edd42c1d66f106a1fc3b0b26800d0624ece8adc41e9a5485858560405160200161289994939291906150da565b60405160208183030381529060405280519060200120612d01565b90509392505050565b60008060006128cc8585612d1b565b915091506128d981612d6c565b819250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16612906836123ac565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612a4557600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129b95780600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129b19190615126565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612a445780600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a3c919061515a565b925050819055505b5b50505050565b50505050565b6000612a728473ffffffffffffffffffffffffffffffffffffffff16612ed2565b15612bcb578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a9b611f06565b8786866040518563ffffffff1660e01b8152600401612abd949392919061518e565b6020604051808303816000875af1925050508015612af957506040513d601f19601f82011682018060405250810190612af691906151ef565b60015b612b7b573d8060008114612b29576040519150601f19603f3d011682016040523d82523d6000602084013e612b2e565b606091505b506000815103612b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6a90614da8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612bd0565b600190505b949350505050565b612be28383612ef5565b612bef6000848484612a51565b612c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2590614da8565b60405180910390fd5b505050565b606060006001612c4284613112565b01905060008167ffffffffffffffff811115612c6157612c60613c58565b5b6040519080825280601f01601f191660200182016040528015612c935781602001600182028036833780820191505090505b509050600082602001820190505b600115612cf6578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cea57612ce961521c565b5b04945060008503612ca1575b819350505050919050565b6000612d14612d0e613265565b8361337f565b9050919050565b6000806041835103612d5c5760008060006020860151925060408601519150606086015160001a9050612d50878285856133b2565b94509450505050612d65565b60006002915091505b9250929050565b60006004811115612d8057612d7f613878565b5b816004811115612d9357612d92613878565b5b0315612ecf5760016004811115612dad57612dac613878565b5b816004811115612dc057612dbf613878565b5b03612e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df790615297565b60405180910390fd5b60026004811115612e1457612e13613878565b5b816004811115612e2757612e26613878565b5b03612e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5e90615303565b60405180910390fd5b60036004811115612e7b57612e7a613878565b5b816004811115612e8e57612e8d613878565b5b03612ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec590615395565b60405180910390fd5b5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5b90615401565b60405180910390fd5b612f6d816128e4565b15612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa49061546d565b60405180910390fd5b612fbb600083836001612925565b612fc4816128e4565b15613004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ffb9061546d565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461310e600083836001612a4b565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613170577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816131665761316561521c565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131ad576d04ee2d6d415b85acef810000000083816131a3576131a261521c565b5b0492506020810190505b662386f26fc1000083106131dc57662386f26fc1000083816131d2576131d161521c565b5b0492506010810190505b6305f5e1008310613205576305f5e10083816131fb576131fa61521c565b5b0492506008810190505b612710831061322a5761271083816132205761321f61521c565b5b0492506004810190505b6064831061324d57606483816132435761324261521c565b5b0492506002810190505b600a831061325c576001810190505b80915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156132e157507f000000000000000000000000000000000000000000000000000000000000000046145b1561330e577f0000000000000000000000000000000000000000000000000000000000000000905061337c565b6133797f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613494565b90505b90565b600082826040516020016133949291906154fa565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156133ed57600060039150915061348b565b600060018787878760405160008152602001604052604051613412949392919061554d565b6020604051602081039080840390855afa158015613434573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036134825760006001925092505061348b565b80600092509250505b94509492505050565b600083838346306040516020016134af959493929190615592565b6040516020818303038152906040528051906020012090509392505050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001606081526020016000600781111561352757613526613878565b5b8152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61359881613563565b81146135a357600080fd5b50565b6000813590506135b58161358f565b92915050565b6000602082840312156135d1576135d0613559565b5b60006135df848285016135a6565b91505092915050565b60008115159050919050565b6135fd816135e8565b82525050565b600060208201905061361860008301846135f4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561365857808201518184015260208101905061363d565b60008484015250505050565b6000601f19601f8301169050919050565b60006136808261361e565b61368a8185613629565b935061369a81856020860161363a565b6136a381613664565b840191505092915050565b600060208201905081810360008301526136c88184613675565b905092915050565b6000819050919050565b6136e3816136d0565b81146136ee57600080fd5b50565b600081359050613700816136da565b92915050565b60006020828403121561371c5761371b613559565b5b600061372a848285016136f1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061375e82613733565b9050919050565b61376e81613753565b82525050565b60006020820190506137896000830184613765565b92915050565b61379881613753565b81146137a357600080fd5b50565b6000813590506137b58161378f565b92915050565b600080604083850312156137d2576137d1613559565b5b60006137e0858286016137a6565b92505060206137f1858286016136f1565b9150509250929050565b613804816136d0565b82525050565b600060208201905061381f60008301846137fb565b92915050565b60008060006060848603121561383e5761383d613559565b5b600061384c868287016137a6565b935050602061385d868287016137a6565b925050604061386e868287016136f1565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600881106138b8576138b7613878565b5b50565b60008190506138c9826138a7565b919050565b60006138d9826138bb565b9050919050565b6138e9816138ce565b82525050565b600060208201905061390460008301846138e0565b92915050565b6000602082840312156139205761391f613559565b5b600061392e848285016137a6565b91505092915050565b61394081613753565b82525050565b600081519050919050565b600082825260208201905092915050565b600061396d82613946565b6139778185613951565b935061398781856020860161363a565b61399081613664565b840191505092915050565b6139a4816136d0565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600381106139e7576139e6613878565b5b50565b60008190506139f8826139d6565b919050565b6000613a08826139ea565b9050919050565b613a18816139fd565b82525050565b604082016000820151613a34600085018261399b565b506020820151613a476020850182613a0f565b50505050565b6000613a598383613a1e565b60408301905092915050565b6000602082019050919050565b6000613a7d826139aa565b613a8781856139b5565b9350613a92836139c6565b8060005b83811015613ac3578151613aaa8882613a4d565b9750613ab583613a65565b925050600181019050613a96565b5085935050505092915050565b613ad9816138ce565b82525050565b600067ffffffffffffffff82169050919050565b613afc81613adf565b82525050565b600061010083016000830151613b1b6000860182613937565b5060208301518482036020860152613b338282613962565b9150506040830151613b48604086018261399b565b5060608301518482036060860152613b608282613962565b91505060808301518482036080860152613b7a8282613a72565b91505060a0830151613b8f60a0860182613ad0565b5060c0830151613ba260c0860182613af3565b5060e0830151613bb560e0860182613af3565b508091505092915050565b60006020820190508181036000830152613bda8184613b02565b905092915050565b613beb816135e8565b8114613bf657600080fd5b50565b600081359050613c0881613be2565b92915050565b60008060408385031215613c2557613c24613559565b5b6000613c33858286016137a6565b9250506020613c4485828601613bf9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c9082613664565b810181811067ffffffffffffffff82111715613caf57613cae613c58565b5b80604052505050565b6000613cc261354f565b9050613cce8282613c87565b919050565b600067ffffffffffffffff821115613cee57613ced613c58565b5b613cf782613664565b9050602081019050919050565b82818337600083830152505050565b6000613d26613d2184613cd3565b613cb8565b905082815260208101848484011115613d4257613d41613c53565b5b613d4d848285613d04565b509392505050565b600082601f830112613d6a57613d69613c4e565b5b8135613d7a848260208601613d13565b91505092915050565b60008060008060808587031215613d9d57613d9c613559565b5b6000613dab878288016137a6565b9450506020613dbc878288016137a6565b9350506040613dcd878288016136f1565b925050606085013567ffffffffffffffff811115613dee57613ded61355e565b5b613dfa87828801613d55565b91505092959194509250565b600067ffffffffffffffff821115613e2157613e20613c58565b5b613e2a82613664565b9050602081019050919050565b6000613e4a613e4584613e06565b613cb8565b905082815260208101848484011115613e6657613e65613c53565b5b613e71848285613d04565b509392505050565b600082601f830112613e8e57613e8d613c4e565b5b8135613e9e848260208601613e37565b91505092915050565b613eb081613adf565b8114613ebb57600080fd5b50565b600081359050613ecd81613ea7565b92915050565b600067ffffffffffffffff821115613eee57613eed613c58565b5b602082029050602081019050919050565b600080fd5b6000613f17613f1284613ed3565b613cb8565b90508083825260208201905060208402830185811115613f3a57613f39613eff565b5b835b81811015613f635780613f4f88826136f1565b845260208401935050602081019050613f3c565b5050509392505050565b600082601f830112613f8257613f81613c4e565b5b8135613f92848260208601613f04565b91505092915050565b60008060008060008060c08789031215613fb857613fb7613559565b5b600087013567ffffffffffffffff811115613fd657613fd561355e565b5b613fe289828a01613d55565b965050602087013567ffffffffffffffff8111156140035761400261355e565b5b61400f89828a01613d55565b955050604087013567ffffffffffffffff8111156140305761402f61355e565b5b61403c89828a01613e79565b945050606061404d89828a01613ebe565b935050608061405e89828a01613ebe565b92505060a087013567ffffffffffffffff81111561407f5761407e61355e565b5b61408b89828a01613f6d565b9150509295509295509295565b6000819050919050565b6140ab81614098565b82525050565b60006020820190506140c660008301846140a2565b92915050565b600067ffffffffffffffff8211156140e7576140e6613c58565b5b602082029050602081019050919050565b600061410b614106846140cc565b613cb8565b9050808382526020820190506020840283018581111561412e5761412d613eff565b5b835b8181101561417557803567ffffffffffffffff81111561415357614152613c4e565b5b8086016141608982613d55565b85526020850194505050602081019050614130565b5050509392505050565b600082601f83011261419457614193613c4e565b5b81356141a48482602086016140f8565b91505092915050565b6000806000606084860312156141c6576141c5613559565b5b60006141d4868287016136f1565b935050602084013567ffffffffffffffff8111156141f5576141f461355e565b5b6142018682870161417f565b925050604061421286828701613bf9565b9150509250925092565b6000806040838503121561423357614232613559565b5b6000614241858286016137a6565b9250506020614252858286016137a6565b9150509250929050565b614265816139fd565b82525050565b6000602082019050614280600083018461425c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142cd57607f821691505b6020821081036142e0576142df614286565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614342602183613629565b915061434d826142e6565b604082019050919050565b6000602082019050818103600083015261437181614335565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006143d4603d83613629565b91506143df82614378565b604082019050919050565b60006020820190508181036000830152614403816143c7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614466602d83613629565b91506144718261440a565b604082019050919050565b6000602082019050818103600083015261449581614459565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006144d2601883613629565b91506144dd8261449c565b602082019050919050565b60006020820190508181036000830152614501816144c5565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614564602983613629565b915061456f82614508565b604082019050919050565b6000602082019050818103600083015261459381614557565b9050919050565b6000815190506145a9816136da565b92915050565b6000602082840312156145c5576145c4613559565b5b60006145d38482850161459a565b91505092915050565b6145e581613adf565b82525050565b600060408201905061460060008301856145dc565b61460d60208301846145dc565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061467d826136d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036146af576146ae614643565b5b600182019050919050565b60006146c582613adf565b91506146d083613adf565b9250828201905067ffffffffffffffff8111156146f0576146ef614643565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261471b565b614762868361471b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061479f61479a614795846136d0565b61477a565b6136d0565b9050919050565b6000819050919050565b6147b983614784565b6147cd6147c5826147a6565b848454614728565b825550505050565b600090565b6147e26147d5565b6147ed8184846147b0565b505050565b5b81811015614811576148066000826147da565b6001810190506147f3565b5050565b601f82111561485657614827816146f6565b6148308461470b565b8101602085101561483f578190505b61485361484b8561470b565b8301826147f2565b50505b505050565b600082821c905092915050565b60006148796000198460080261485b565b1980831691505092915050565b60006148928383614868565b9150826002028217905092915050565b6148ab82613946565b67ffffffffffffffff8111156148c4576148c3613c58565b5b6148ce82546142b5565b6148d9828285614815565b600060209050601f83116001811461490c57600084156148fa578287015190505b6149048582614886565b86555061496c565b601f19841661491a866146f6565b60005b828110156149425784890151825560018201915060208501945060208101905061491d565b8683101561495f578489015161495b601f891682614868565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061498a8261361e565b6149948185614974565b93506149a481856020860161363a565b80840191505092915050565b60006149bc828561497f565b91506149c8828461497f565b91508190509392505050565b6000815190506149e38161378f565b92915050565b6000602082840312156149ff576149fe613559565b5b6000614a0d848285016149d4565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a72602683613629565b9150614a7d82614a16565b604082019050919050565b60006020820190508181036000830152614aa181614a65565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614b04602583613629565b9150614b0f82614aa8565b604082019050919050565b60006020820190508181036000830152614b3381614af7565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b96602483613629565b9150614ba182614b3a565b604082019050919050565b60006020820190508181036000830152614bc581614b89565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203660008201527f3420626974730000000000000000000000000000000000000000000000000000602082015250565b6000614c28602683613629565b9150614c3382614bcc565b604082019050919050565b60006020820190508181036000830152614c5781614c1b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c94602083613629565b9150614c9f82614c5e565b602082019050919050565b60006020820190508181036000830152614cc381614c87565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614d00601983613629565b9150614d0b82614cca565b602082019050919050565b60006020820190508181036000830152614d2f81614cf3565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614d92603283613629565b9150614d9d82614d36565b604082019050919050565b60006020820190508181036000830152614dc181614d85565b9050919050565b600082825260208201905092915050565b6000614de482613946565b614dee8185614dc8565b9350614dfe81856020860161363a565b614e0781613664565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614e4a838361399b565b60208301905092915050565b6000602082019050919050565b6000614e6e82614e12565b614e788185614e1d565b9350614e8383614e2e565b8060005b83811015614eb4578151614e9b8882614e3e565b9750614ea683614e56565b925050600181019050614e87565b5085935050505092915050565b6000608082019050614ed660008301876137fb565b8181036020830152614ee88186614dd9565b90508181036040830152614efc8185614dd9565b90508181036060830152614f108184614e63565b905095945050505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614f77602e83613629565b9150614f8282614f1b565b604082019050919050565b60006020820190508181036000830152614fa681614f6a565b9050919050565b60008190508160005260206000209050919050565b601f82111561500357614fd481614fad565b614fdd8461470b565b81016020851015614fec578190505b615000614ff88561470b565b8301826147f2565b50505b505050565b6150118261361e565b67ffffffffffffffff81111561502a57615029613c58565b5b61503482546142b5565b61503f828285614fc2565b600060209050601f8311600181146150725760008415615060578287015190505b61506a8582614886565b8655506150d2565b601f19841661508086614fad565b60005b828110156150a857848901518255600182019150602085019450602081019050615083565b868310156150c557848901516150c1601f891682614868565b8355505b6001600288020188555050505b505050505050565b60006080820190506150ef60008301876140a2565b6150fc60208301866137fb565b61510960408301856137fb565b818103606083015261511b8184613675565b905095945050505050565b6000615131826136d0565b915061513c836136d0565b925082820390508181111561515457615153614643565b5b92915050565b6000615165826136d0565b9150615170836136d0565b925082820190508082111561518857615187614643565b5b92915050565b60006080820190506151a36000830187613765565b6151b06020830186613765565b6151bd60408301856137fb565b81810360608301526151cf8184614dd9565b905095945050505050565b6000815190506151e98161358f565b92915050565b60006020828403121561520557615204613559565b5b6000615213848285016151da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615281601883613629565b915061528c8261524b565b602082019050919050565b600060208201905081810360008301526152b081615274565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006152ed601f83613629565b91506152f8826152b7565b602082019050919050565b6000602082019050818103600083015261531c816152e0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061537f602283613629565b915061538a82615323565b604082019050919050565b600060208201905081810360008301526153ae81615372565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153eb602083613629565b91506153f6826153b5565b602082019050919050565b6000602082019050818103600083015261541a816153de565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615457601c83613629565b915061546282615421565b602082019050919050565b600060208201905081810360008301526154868161544a565b9050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006154c3600283614974565b91506154ce8261548d565b600282019050919050565b6000819050919050565b6154f46154ef82614098565b6154d9565b82525050565b6000615505826154b6565b915061551182856154e3565b60208201915061552182846154e3565b6020820191508190509392505050565b600060ff82169050919050565b61554781615531565b82525050565b600060808201905061556260008301876140a2565b61556f602083018661553e565b61557c60408301856140a2565b61558960608301846140a2565b95945050505050565b600060a0820190506155a760008301886140a2565b6155b460208301876140a2565b6155c160408301866140a2565b6155ce60608301856137fb565b6155db6080830184613765565b969550505050505056fea26469706673582212202e530a530926d29ffee2b3c5e3ff0c01955a1ffffc77595eff5a9e8ab145668d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2770,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7825,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7827,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7831,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7835,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7839,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7845,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8891,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 14647,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "idCount",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)10809_storage"
      },
      {
        "astId": 14652,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "documentDetials",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(DocumentDetials)16727_storage)"
      },
      {
        "astId": 14654,
        "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
        "label": "userIdentityNFT",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Party)16733_storage)dyn_storage": {
        "base": "t_struct(Party)16733_storage",
        "encoding": "dynamic_array",
        "label": "struct IDocumentSignature.Party[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(DocumentState)16746": {
        "encoding": "inplace",
        "label": "enum IDocumentSignature.DocumentState",
        "numberOfBytes": "1"
      },
      "t_enum(SignatureStatus)16737": {
        "encoding": "inplace",
        "label": "enum IDocumentSignature.SignatureStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DocumentDetials)16727_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDocumentSignature.DocumentDetials)",
        "numberOfBytes": "32",
        "value": "t_struct(DocumentDetials)16727_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)10809_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 10808,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DocumentDetials)16727_storage": {
        "encoding": "inplace",
        "label": "struct IDocumentSignature.DocumentDetials",
        "members": [
          {
            "astId": 16709,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16711,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 16713,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16715,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 16719,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "parties",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Party)16733_storage)dyn_storage"
          },
          {
            "astId": 16722,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(DocumentState)16746"
          },
          {
            "astId": 16724,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "signatureStart",
            "offset": 1,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 16726,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "signatureEnd",
            "offset": 9,
            "slot": "5",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Party)16733_storage": {
        "encoding": "inplace",
        "label": "struct IDocumentSignature.Party",
        "members": [
          {
            "astId": 16729,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16732,
            "contract": "contracts/core/DocumentSignature.sol:DocumentSignature",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SignatureStatus)16737"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}